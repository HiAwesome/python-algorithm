"""
假如我们有如下所示的一个 Python 片段，尽管这个程序实现不了什么功能，但能指导我们如何对代码进行执行分析。
"""

a = 5
b = 6
c = 10

for i in range(n):
    for j in range(n):
        x = i * i
        y = j * j
        z = i * j

for k in range(n):
    w = a * k + 45
    v = b * b

d = 33

"""
我们发现，任务操作总数分为 4 项：
1. 第一项是常数 3，代表程序开头的三个赋值语句；
2. 第二项是 3n^2，因为嵌套迭代（循环结构）中有三个赋值语句分别被重复执行了 n^2 次；
3. 第三项是 2n，表示两个赋值语句被重复执行了 n 次;
4. 最后一项是常熟 1，代表最后的赋值语句。
我们得到 T(n) = 3 + 3n^2 + 2n + 1 = 3n^2 + 2n + 4。
看到指数项，我们自然地发现 n^2 项占主导，当 n 增大时，其他项和主导项的系数都可以忽略，所以这个代码片段的数量级就是 O(n^2).
"""
